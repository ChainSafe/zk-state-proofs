    /*
    #[tokio::test]
    async fn test_get_merkle_proof_alloy() {
        let key = load_infura_key_from_env();
        println!("Key: {}", key);
        let rpc_url = "https://mainnet.infura.io/v3/".to_string() + &key;
        let provider = Provider::try_from(rpc_url).expect("Failed to construct provider!");
        let block_hash = "0x8230bd00f36e52e68dd4a46bfcddeceacbb689d808327f4c76dbdf8d33d58ca8";
        //let untrusted_hash = "0xacb81623523bbabccb1638a907686bc2f3229c70e3ab51777bef0a635f3ac03f";

        let block = provider
            .get_block_with_txs(H256::from_str(block_hash).unwrap())
            .await
            .expect("Failed to get Block!")
            .expect("Block not found!");

        let mut builder = alloy_trie::HashBuilder::default();
        println!("Empty Root: {:?}", &builder.root());
        for (index, tx) in block.transactions.iter().enumerate() {
            let bytes = alloy_rlp::encode(index);
            println!("bytes: {:?}", &bytes);
            let nibbles = alloy_trie::Nibbles::unpack(index.to_be_bytes());
            println!("Nibbles: {:?}", &nibbles);
            builder.add_leaf(nibbles, &tx.rlp())
        }
        let root = builder.root();
        println!("Root: {:?}", &root);
        println!("Expected Root: {:?}", &block.transactions_root);
    }
    */

    /* Reference implementation

        fn verify_proof(
            &self,
            root_hash: B256,
            key: &[u8],
            proof: Vec<Vec<u8>>,
        ) -> TrieResult<Option<Vec<u8>>> {
            let proof_db = Arc::new(MemoryDB::new(true));
            for node_encoded in proof.into_iter() {
                let hash: B256 = keccak(&node_encoded).as_fixed_bytes().into();

                if root_hash.eq(&hash) || node_encoded.len() >= HASHED_LENGTH {
                    proof_db.insert(hash.as_slice(), node_encoded).unwrap();
                }
            }
            let trie = EthTrie::from(proof_db, root_hash).or(Err(TrieError::InvalidProof))?;
            trie.get(key).or(Err(TrieError::InvalidProof))
        }

    */